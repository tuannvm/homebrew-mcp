name: Update Homebrew Formula

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'GitHub repository (e.g., tuannvm/mcp-trino)'
        required: true
        default: 'tuannvm/mcp-trino'
      formula:
        description: 'Formula file name (e.g., mcp-trino.rb)'
        required: true
        default: 'mcp-trino.rb'
  repository_dispatch:
    types: [update-formula]
  release:
    types: [published]  # Trigger on new releases

jobs:
  update-formula:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for pushing changes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Determine repository and formula
        id: determine-info
        run: |
          # For workflow_dispatch, use provided inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            GITHUB_REPO="${{ github.event.inputs.repository }}"
            FORMULA_FILE="${{ github.event.inputs.formula }}"
          
          # For repository_dispatch, use provided data if available
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            GITHUB_REPO="${{ github.event.client_payload.repository || 'tuannvm/mcp-trino' }}"
            FORMULA_FILE="${{ github.event.client_payload.formula || 'mcp-trino.rb' }}"
          
          # For release event, determine from release repository
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            GITHUB_REPO="${{ github.repository }}"
            # Extract the package name from repository (e.g., mcp-trino from tuannvm/mcp-trino)
            PACKAGE_NAME=$(echo "$GITHUB_REPO" | cut -d'/' -f2)
            FORMULA_FILE="${PACKAGE_NAME}.rb"
          fi
          
          echo "GITHUB_REPO=$GITHUB_REPO" >> $GITHUB_ENV
          echo "FORMULA_FILE=$FORMULA_FILE" >> $GITHUB_ENV
          echo "Repository: $GITHUB_REPO, Formula: $FORMULA_FILE"
          
          # Extract the package name without .rb extension
          PACKAGE_NAME=$(basename "$FORMULA_FILE" .rb)
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "Package name: $PACKAGE_NAME"

      - name: Get latest release info
        id: release
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ env.GITHUB_REPO }}
          excludes: prerelease, draft

      - name: Set version
        id: version
        run: |
          # Remove 'v' prefix if present
          VERSION="${{ steps.release.outputs.release }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"

      - name: Download release assets and calculate SHA256
        run: |
          mkdir -p tmp
          cd tmp
          
          # Define platforms and architectures
          PLATFORMS=("darwin" "linux")
          ARCHES=("amd64" "arm64")
          
          # Download each asset and calculate SHA256
          for PLATFORM in "${PLATFORMS[@]}"; do
            for ARCH in "${ARCHES[@]}"; do
              # Build the filename based on the naming pattern in the formula
              FILENAME="${PACKAGE_NAME}_${VERSION}_${PLATFORM}_${ARCH}.tar.gz"
              DOWNLOAD_URL="https://github.com/${GITHUB_REPO}/releases/download/v${VERSION}/${FILENAME}"
              echo "Trying: $DOWNLOAD_URL"
              
              if curl -L -f -o "$FILENAME" "$DOWNLOAD_URL"; then
                SHA=$(sha256sum "$FILENAME" | cut -d ' ' -f 1)
                VAR_NAME="${PLATFORM}_${ARCH}_SHA"
                echo "$VAR_NAME=$SHA" >> $GITHUB_ENV
                echo "$PLATFORM $ARCH SHA: $SHA"
              else
                echo "::warning::Failed to download $FILENAME"
              fi
            done
          done

      - name: Check if formula exists
        id: check-formula
        run: |
          if [ -f "${{ env.FORMULA_FILE }}" ]; then
            echo "FORMULA_EXISTS=true" >> $GITHUB_ENV
            echo "Formula file ${{ env.FORMULA_FILE }} exists"
          else
            echo "FORMULA_EXISTS=false" >> $GITHUB_ENV
            echo "::warning::Formula file ${{ env.FORMULA_FILE }} does not exist"
          fi

      - name: Create formula if not exists
        if: env.FORMULA_EXISTS == 'false'
        run: |
          echo "Creating new formula file for ${{ env.PACKAGE_NAME }} version $VERSION"
          
          # Create formula using Ruby script for better readability
          ruby -e '
            require "erb"
            
            package_name = ENV["PACKAGE_NAME"]
            version = ENV["VERSION"]
            github_repo = ENV["GITHUB_REPO"]
            
            if package_name.nil? || package_name.empty?
              abort "Error: PACKAGE_NAME environment variable is not set or empty"
            end
            
            if version.nil? || version.empty?
              abort "Error: VERSION environment variable is not set or empty"
            end
            
            if github_repo.nil? || github_repo.empty?
              abort "Error: GITHUB_REPO environment variable is not set or empty"
            end
            
            # Convert package name to class name (camel case)
            class_name = package_name.gsub(/(^|-)([a-z])/) { $2.upcase }
            
            # Get SHA values from environment
            darwin_arm64_sha = ENV["darwin_arm64_SHA"] || "00000000000000000000000000000000000000000000000000000000000000000"
            darwin_amd64_sha = ENV["darwin_amd64_SHA"] || "00000000000000000000000000000000000000000000000000000000000000000"
            linux_arm64_sha = ENV["linux_arm64_SHA"] || "00000000000000000000000000000000000000000000000000000000000000000"
            linux_amd64_sha = ENV["linux_amd64_SHA"] || "00000000000000000000000000000000000000000000000000000000000000000"
            
            # Check if at least one SHA is available
            if [darwin_arm64_sha, darwin_amd64_sha, linux_arm64_sha, linux_amd64_sha].all? { |sha| sha == "00000000000000000000000000000000000000000000000000000000000000000" }
              puts "Warning: No SHA256 values were found. Using placeholders."
            end
            
            template = <<-ERB
            class <%= class_name %> < Formula
              desc "<%= package_name %> - Add description here"
              homepage "https://github.com/<%= github_repo %>"
              version "<%= version %>"
              license "Apache-2.0"
            
              on_macos do
                on_arm do
                  url "https://github.com/<%= github_repo %>/releases/download/v<%= version %>/<%= package_name %>_<%= version %>_darwin_arm64.tar.gz"
                  sha256 "<%= darwin_arm64_sha %>"
                end
                on_intel do
                  url "https://github.com/<%= github_repo %>/releases/download/v<%= version %>/<%= package_name %>_<%= version %>_darwin_amd64.tar.gz"
                  sha256 "<%= darwin_amd64_sha %>"
                end
              end
            
              on_linux do
                on_arm do
                  url "https://github.com/<%= github_repo %>/releases/download/v<%= version %>/<%= package_name %>_<%= version %>_linux_arm64.tar.gz"
                  sha256 "<%= linux_arm64_sha %>"
                end
                on_intel do
                  url "https://github.com/<%= github_repo %>/releases/download/v<%= version %>/<%= package_name %>_<%= version %>_linux_amd64.tar.gz"
                  sha256 "<%= linux_amd64_sha %>"
                end
              end
            
              def install
                bin.install "<%= package_name %>"
              end
            
              test do
                system "\#{bin}/<%= package_name %>", "--version"
              end
            end
            ERB
            
            begin
              result = ERB.new(template, trim_mode: "-").result(binding)
              File.write(ENV["FORMULA_FILE"], result)
              puts "Formula created successfully"
            rescue => e
              abort "Error generating formula: #{e.message}\n#{e.backtrace.join("\n")}"
            end
          '
          
          echo "Created new formula file at ${FORMULA_FILE}"
          cat ${FORMULA_FILE}

      - name: Update formula
        if: env.FORMULA_EXISTS == 'true'
        run: |
          echo "Updating formula with version $VERSION"
          
          # Make a backup of the original formula
          cp ${FORMULA_FILE} ${FORMULA_FILE}.bak
          
          # Update version number in version string
          sed -i -E "s/version \"[0-9.]+\"/version \"${VERSION}\"/g" ${FORMULA_FILE}
          
          # Update version in URLs (match pattern: /releases/download/vX.Y.Z/..._X.Y.Z_...)
          sed -i -E "s|(releases/download/v)[0-9]+\.[0-9]+\.[0-9]+/.*_([0-9]+\.[0-9]+\.[0-9]+)_|\1${VERSION}/\2_${VERSION}_|g" ${FORMULA_FILE}
          
          # Print environment variables for debugging
          echo "Environment variables containing SHA256 values:"
          env | grep "_SHA="
          
          # Update SHA256 values for each platform/arch
          if [ -n "$darwin_amd64_SHA" ]; then
            echo "Updating SHA256 for darwin_amd64"
            sed -i -E "/url.*darwin.*amd64/{n;s/sha256 \"[0-9a-f]+\"/sha256 \"$darwin_amd64_SHA\"/g;}" ${FORMULA_FILE}
          fi
          
          if [ -n "$darwin_arm64_SHA" ]; then
            echo "Updating SHA256 for darwin_arm64"
            sed -i -E "/url.*darwin.*arm64/{n;s/sha256 \"[0-9a-f]+\"/sha256 \"$darwin_arm64_SHA\"/g;}" ${FORMULA_FILE}
          fi
          
          if [ -n "$linux_amd64_SHA" ]; then
            echo "Updating SHA256 for linux_amd64"
            sed -i -E "/url.*linux.*amd64/{n;s/sha256 \"[0-9a-f]+\"/sha256 \"$linux_amd64_SHA\"/g;}" ${FORMULA_FILE}
          fi
          
          if [ -n "$linux_arm64_SHA" ]; then
            echo "Updating SHA256 for linux_arm64"
            echo "Using sed -i -E '/url.*linux.*arm64/{n;s/sha256 \"[0-9a-f]+\"/sha256 \"$linux_arm64_SHA\"/g;}' ${FORMULA_FILE}"
            sed -i -E "/url.*linux.*arm64/{n;s/sha256 \"[0-9a-f]+\"/sha256 \"$linux_arm64_SHA\"/g;}" ${FORMULA_FILE}
          fi
          
          # Print diff to see changes
          echo "Changes made to formula:"
          diff ${FORMULA_FILE}.bak ${FORMULA_FILE} || true
          
          # Remove backup
          rm ${FORMULA_FILE}.bak

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          git add ${FORMULA_FILE}
          
          if [ "${{ env.FORMULA_EXISTS }}" == "true" ]; then
            # For updating existing formula
            if git diff --staged --quiet; then
              echo "No changes to commit"
              exit 0
            fi
            git commit -m "Update ${FORMULA_FILE} to version ${VERSION}"
          else
            # For new formula
            git commit -m "Create new formula ${FORMULA_FILE} for version ${VERSION}"
          fi
          
          git push
